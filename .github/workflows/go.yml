name: Go
on: [push]
jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: false

      - name: Lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.54
          only-new-issues: true



  test:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/setup-go@v5
      with:
        go-version: "1.22"

    - uses: actions/checkout@v4
      with:
        path: gopath/src/github.com/teamwork/kommentaar

    - name: Test & coverage
      env:
        GO111MODULE: "off"
        GOPATH: ${{ github.workspace }}/gopath
      run: |
        cd $GOPATH/src/github.com/teamwork/kommentaar

        go test -coverprofile=full_coverage -race ./...

    - name: Upload coverage
      env:
        COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GOPATH: ${{ github.workspace }}/gopath
      run: |
        export PATH="$GOPATH/bin:$PATH"
        go install github.com/mattn/goveralls@latest
        cd $GOPATH/src/github.com/teamwork/kommentaar
        goveralls -coverprofile=full_coverage -service=github



  build:
    name: Build and push image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: startsWith(github.event.ref, 'refs/tags/v')
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:

    - uses: actions/checkout@v4
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

