# vim:ft=config
#
# Kommentaar is configured with a sconfig configuration file. See
# https://arp242.net/code/sconfig for a full description of the syntax, the
# short of it is:
#
# - `#` are for comments
# - Configuration keys and values are separated by whitespace.
# - No quotes needed.
# - Line continuation is done by indenting.
#

# Set output format; can be overridden with the -output commandline option.
#
# openapi2-yaml        OpenAPI/Swagger 2.0 as YAML
# openapi2-json        OpenAPI/Swagger 2.0 as JSON
# openapi2-jsonindent  OpenAPI/Swagger 2.0 as JSON indented
# html                 HTML documentation
output openapi2-yaml

# Packages to scan by default; can be overridden from the commandline.
# Will default to current directory if omitted.
#packages github.com/teamwork/desk/api/v2/...

# Application title; this is required.
title Example title

# API version; this is treated as a string and required.
version 1.0

# Description of the application in HTML.
#description

# Contact details.
#contact-name
#contact-email
#contact-site

# Set the default Content-Type for requests and responses; this means that
# writing:
#
#   Request (application/json): foo
#
# can be shortened to:
#
#   Request: foo
default-request-ct  application/json
default-response-ct application/json

# Set default response types. With this, you can just use:
#
#   // Response 400: $default
#   // Response 404: $default
#
# Instead of referring to the full types every time.
#
# The syntax is the same as regular Response lines, minus the Response keyword:
#   [HTTP code] [(optional Content-Type)]: [type]
#
# Examples:
#default-response 400: github.com/teamwork/validate.Validator
#default-response 404 (application/json): github.com/teamwork/apiutil/errorhandler.Error

# Prefix all paths with this before adding to the output.
#prefix

# Set output basepath; this is different from "prefix" because the former
# modifies every path before it gets added to the output, whereas this will only
# set the basePath attribute in the output if that's supported in the format.
# If the output format doesn't support Basepath, it is added to every endpoint
# *before* the prefix.
#basepath /myapp

# Struct tag to use for the output names; should change this if you want to
# output something other than JSON.
# For query, form, and path parameters it'll always use those names as the
# struct tag.
#struct-tag json

# Map types to anoter type. Useful for wrappers around types that don't need to
# be exposed in the user-facing documentation.
#
# The map target must be a Go built-in type (string, int64, etc.)
map-types
	# Standard library
	sql.NullBool    bool
	sql.NullFloat64 float64
	sql.NullInt64   int64
	sql.NullString  string
	time.Time       string

	# github.com/guregu/null
	null.Bool   bool
	null.Float  float64
	null.Int    int64
	null.String string
	null.Time   string
	zero.Bool   bool
	zero.Float  float64
	zero.Int    int64
	zero.String string
	zero.Time   string

# Map some times to an OpenAPI format.
#
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#dataTypeFormat
# https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-7.3
map-format
	# Standard library
	time.Time date-time

	# github.com/guregu/null
	null.Time date-time
	zero.Time date-time
